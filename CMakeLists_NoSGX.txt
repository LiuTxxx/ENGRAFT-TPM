cmake_minimum_required(VERSION 2.8.10)
# If you want clang.
# find_program(CMAKE_CXX_COMPILER clang++-8 clang++)
# find_program(CMAKE_C_COMPILER clang-8 clang)
project(braft C CXX)

# This option is used to pass compilation when running in OS totally
add_compile_definitions(RUN_OUTSIDE_SGX)

# This option is used to enable features that doesn't use in SGX-Raft
# add_compile_definitions(USE_NORMAL_FUNCTION)

# Clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Use ccache to boost compilation
set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
set(CMAKE_C_COMPILER_LAUNCHER ccache)

SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "braft authors") #required

INCLUDE(CPack)

option(WITH_DEBUG_SYMBOLS "With debug symbols" ON)

set(WITH_GLOG_VAL "0")

if(WITH_DEBUG_SYMBOLS)
    set(DEBUG_SYMBOL "-g")
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

include(FindThreads)
include(FindProtobuf)

message(CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER})
message(CMAKE_C_COMPILER: ${CMAKE_C_COMPILER})

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    message("CMAKE_GUN_COMPILER_VERSION: " ${CMAKE_CXX_COMPILER_VERSION})
    # require at least gcc 4.8
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
        message(FATAL_ERROR "GCC is too old, please install a newer version supporting C++11")
    endif()
    if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0))
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-aligned-new")
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # require at least clang 3.3    
    message("CMAKE_CLANG_COMPILER_VERSION: " ${CMAKE_CXX_COMPILER_VERSION})
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.3)
        message(FATAL_ERROR "Clang is too old, please install a newer version supporting C++11")
    endif()
else()
    message(WARNING "You are using an unsupported compiler! Compilation has only been tested with Clang and GCC.")
endif()


include(FindOpenSSL)

include_directories(
        ${OPENSSL_INCLUDE_DIR}
        )
include_directories("/usr/local/include/tss2")


set(DYNAMIC_LIB
    ${CMAKE_THREAD_LIBS_INIT}
    ${OPENSSL_LIBRARIES}
    ${OPENSSL_CRYPTO_LIBRARY}
    tss2-esys 
    tss2-sys 
    tss2-mu 
    tss2-rc
    tss2-tcti-device
    # dl
    # z
    # rt
)

# for *.so
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output/lib)
# for *.a
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output/lib)

file(GLOB BRAFT_PROTOS "${CMAKE_CURRENT_SOURCE_DIR}/src/braft/*.proto")
foreach(PROTO ${BRAFT_PROTOS})
    # Get a specific component of a full filename:
    # get_filename_component(<var> <FileName> <mode> [CACHE])
    # Sets <var> to a component of <FileName>, where <mode> NAME_WE means:
    # NAME_WE = File name with neither the directory nor the longest extension
    get_filename_component(PROTO_WE ${PROTO} NAME_WE)
    list(APPEND PROTO_SRCS "${CMAKE_CURRENT_BINARY_DIR}/braft/${PROTO_WE}.pb.cc")
    # message(CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR})
    # message(DEBUG "${PROTOBUF_PROTOC_EXECUTABLE} ${PROTOC_FLAGS}
    # --cpp_out=${CMAKE_CURRENT_BINARY_DIR}
    # --proto_path=${PROTOBUF_INCLUDE_DIR}
    # --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src
    # --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src/braft/ ${PROTO}")
    execute_process(
        COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} ${PROTOC_FLAGS}
        --cpp_out=${CMAKE_CURRENT_BINARY_DIR}
        --proto_path=${PROTOBUF_INCLUDE_DIR}
        --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src
        --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src/braft/ ${PROTO}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        ERROR_VARIABLE PROTO_ERROR
        RESULT_VARIABLE PROTO_RESULT
    )
    if (${PROTO_RESULT} EQUAL 0) 
    else ()
        message (FATAL_ERROR "Fail to generate cpp of ${PROTO} : ${PROTO_ERROR}")
    endif()
endforeach()

file(GLOB_RECURSE BRAFT_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/braft/*.cpp")
file(GLOB_RECURSE GFLAGS_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/google/gflags/*.cc")
file(GLOB_RECURSE PROTOBUF_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/google/protobuf/*.cc")

# sgxbutil, 
file(GLOB_RECURSE SGXBUTIL_SOURCES 
        "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/*.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/*.cc")
# 移除SGXBUTIL_SOURCES中暂时不需要的部分
# set(SGXBUTIL_REMOVE_CODE 
#     "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/memory/aligned_memory.cc"
#     "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/at_exit.cc"
#     "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/memory/singleton.cc"
#     "${CMAKE_CURRENT_SOURCE_DIR}/src/sgxbutil/errno.cpp")
# foreach(v ${SGXBUTIL_REMOVE_CODE})
#     list(REMOVE_ITEM SGXBUTIL_SOURCES ${v})
# endforeach()        
# message("SGXBUTIL_SOURCES**:" ${SGXBUTIL_SOURCES})  

# 添加 brpc 相关源代码，包括brpc、butil、bvar、bthread、json2pb

set(PROTO_FILES_SOURCES 
                # idl_options.pb.cc
                # brpc/rtmp.pb.cc
                # brpc/rpc_dump.pb.cc
                # brpc/get_favicon.pb.cc
                # brpc/span.pb.cc
                brpc/builtin_service.pb.cc
                # brpc/get_js.pb.cc
                brpc/errno.pb.cc
                # brpc/nshead_meta.pb.cc
                brpc/options.pb.cc
                brpc/policy/baidu_rpc_meta.pb.cc
                # brpc/policy/hulu_pbrpc_meta.pb.cc
                # brpc/policy/public_pbrpc_meta.pb.cc
                # brpc/policy/sofa_pbrpc_meta.pb.cc
                # brpc/policy/mongo.pb.cc
                # brpc/trackme.pb.cc
                # brpc/streaming_rpc_meta.pb.cc
                brpc/proto_base.pb.cc)

                
# file(GLOB_RECURSE BVAR_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/bvar/*.cpp")
file(GLOB_RECURSE HOSTHELPER_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/host/*.cpp")
file(GLOB_RECURSE BTHREAD_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/bthread/*.cpp")
# file(GLOB_RECURSE JSON2PB_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/json2pb/*.cpp")
file(GLOB_RECURSE BRPC_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/brpc/*.cpp")


# 加入源代码编译
set(SOURCES
    ${HOSTHELPER_SOURCES}
    ${BTHREAD_SOURCES}
    ${BRPC_SOURCES}
    ${BRAFT_SOURCES}
    ${SGXBUTIL_SOURCES}
    ${PROTOBUF_SOURCES}
    ${GFLAGS_SOURCES}    
    ${PROTO_SRCS}
    ${PROTO_FILES_SOURCES}
    # ${BUTIL_SOURCES}    
    # ${BVAR_SOURCES}
    # ${JSON2PB_SOURCES}    
    )

include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_BINARY_DIR}
)


# 去除 git 操作，用于获取此braft版本
# execute_process(
#     COMMAND bash -c "git rev-parse --short HEAD | tr -d '\n'"
#     OUTPUT_VARIABLE BRAFT_REVISION
# )

set(GFLAGS_NS "google")
set(CMAKE_CPP_FLAGS "${DEFINE_CLOCK_GETTIME} -DGFLAGS_NS=${GFLAGS_NS}")
set(CMAKE_CPP_FLAGS "${CMAKE_CPP_FLAGS} -DBTHREAD_USE_FAST_PTHREAD_MUTEX -D__const__= -D_GNU_SOURCE -DUSE_SYMBOLIZE -DNO_TCMALLOC -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -DBRAFT_REVISION=\\\"${BRAFT_REVISION}\\\" -D__STRICT_ANSI__")
set(CMAKE_CPP_FLAGS "${CMAKE_CPP_FLAGS} ${DEBUG_SYMBOL}")
set(CMAKE_CPP_FLAGS "${CMAKE_CPP_FLAGS} -msse4 -msse4.2")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CPP_FLAGS} -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-invalid-offsetof -Wno-unused-parameter -Wno-reserved-user-defined-literal -fno-omit-frame-pointer")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_CPP_FLAGS} -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-unused-parameter -fno-omit-frame-pointer")

macro(use_cxx11)
if(CMAKE_VERSION VERSION_LESS "3.1.3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else()
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()
endmacro(use_cxx11)

use_cxx11()

add_subdirectory(src)

# 移除工具
# add_subdirectory(tools)

file(COPY ${CMAKE_CURRENT_BINARY_DIR}/braft/
        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/output/include/braft/
        FILES_MATCHING 
        PATTERN "*.h"
        PATTERN "*.hpp"
        )
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/
        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/output/include/
        FILES_MATCHING
        PATTERN "*.h"
        PATTERN "*.hpp"
        )
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/output/include/
        DESTINATION include
        FILES_MATCHING
        PATTERN "*.h"
        PATTERN "*.hpp"
        )
