// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "local_attest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LocalAttestationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalAttestationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AKMEnclaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AKMEnclaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVEnclaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVEnclaveResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_local_5fattest_2eproto() {
  protobuf_AddDesc_local_5fattest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "local_attest.proto");
  GOOGLE_CHECK(file != NULL);
  LocalAttestationRequest_descriptor_ = file->message_type(0);
  static const int LocalAttestationRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, format_settings_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, format_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, evidence_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, evidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, pub_key_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, pub_key_),
  };
  LocalAttestationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalAttestationRequest_descriptor_,
      LocalAttestationRequest::default_instance_,
      LocalAttestationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalAttestationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalAttestationRequest));
  AKMEnclaveRequest_descriptor_ = file->message_type(1);
  static const int AKMEnclaveRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, req_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, akme_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, kve_nonce_),
  };
  AKMEnclaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AKMEnclaveRequest_descriptor_,
      AKMEnclaveRequest::default_instance_,
      AKMEnclaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AKMEnclaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AKMEnclaveRequest));
  KVEnclaveResponse_descriptor_ = file->message_type(2);
  static const int KVEnclaveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, akme_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, kve_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, value_),
  };
  KVEnclaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KVEnclaveResponse_descriptor_,
      KVEnclaveResponse::default_instance_,
      KVEnclaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVEnclaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KVEnclaveResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_local_5fattest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalAttestationRequest_descriptor_, &LocalAttestationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AKMEnclaveRequest_descriptor_, &AKMEnclaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KVEnclaveResponse_descriptor_, &KVEnclaveResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_local_5fattest_2eproto() {
  delete LocalAttestationRequest::default_instance_;
  delete LocalAttestationRequest_reflection_;
  delete AKMEnclaveRequest::default_instance_;
  delete AKMEnclaveRequest_reflection_;
  delete KVEnclaveResponse::default_instance_;
  delete KVEnclaveResponse_reflection_;
}

void protobuf_AddDesc_local_5fattest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022local_attest.proto\"\256\001\n\027LocalAttestatio"
    "nRequest\022\014\n\004step\030\001 \002(\003\022\034\n\024format_setting"
    "s_size\030\002 \001(\003\022\027\n\017format_settings\030\003 \001(\014\022\025\n"
    "\revidence_size\030\004 \001(\003\022\020\n\010evidence\030\005 \001(\014\022\024"
    "\n\014pub_key_size\030\006 \001(\003\022\017\n\007pub_key\030\007 \001(\014\"h\n"
    "\021AKMEnclaveRequest\022\020\n\010req_type\030\001 \002(\t\022\013\n\003"
    "key\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\022\022\n\nakme_nonce\030\004"
    " \002(\004\022\021\n\tkve_nonce\030\005 \002(\004\"Z\n\021KVEnclaveResp"
    "onse\022\022\n\nakme_nonce\030\001 \002(\004\022\021\n\tkve_nonce\030\002 "
    "\002(\004\022\017\n\007success\030\003 \002(\010\022\r\n\005value\030\004 \001(\014", 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "local_attest.proto", &protobuf_RegisterTypes);
  LocalAttestationRequest::default_instance_ = new LocalAttestationRequest();
  AKMEnclaveRequest::default_instance_ = new AKMEnclaveRequest();
  KVEnclaveResponse::default_instance_ = new KVEnclaveResponse();
  LocalAttestationRequest::default_instance_->InitAsDefaultInstance();
  AKMEnclaveRequest::default_instance_->InitAsDefaultInstance();
  KVEnclaveResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_local_5fattest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_local_5fattest_2eproto {
  StaticDescriptorInitializer_local_5fattest_2eproto() {
    protobuf_AddDesc_local_5fattest_2eproto();
  }
} static_descriptor_initializer_local_5fattest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LocalAttestationRequest::kStepFieldNumber;
const int LocalAttestationRequest::kFormatSettingsSizeFieldNumber;
const int LocalAttestationRequest::kFormatSettingsFieldNumber;
const int LocalAttestationRequest::kEvidenceSizeFieldNumber;
const int LocalAttestationRequest::kEvidenceFieldNumber;
const int LocalAttestationRequest::kPubKeySizeFieldNumber;
const int LocalAttestationRequest::kPubKeyFieldNumber;
#endif  // !_MSC_VER

LocalAttestationRequest::LocalAttestationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalAttestationRequest::InitAsDefaultInstance() {
}

LocalAttestationRequest::LocalAttestationRequest(const LocalAttestationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalAttestationRequest::SharedCtor() {
  _cached_size_ = 0;
  step_ = GOOGLE_LONGLONG(0);
  format_settings_size_ = GOOGLE_LONGLONG(0);
  format_settings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  evidence_size_ = GOOGLE_LONGLONG(0);
  evidence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pub_key_size_ = GOOGLE_LONGLONG(0);
  pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalAttestationRequest::~LocalAttestationRequest() {
  SharedDtor();
}

void LocalAttestationRequest::SharedDtor() {
  if (format_settings_ != &::google::protobuf::internal::kEmptyString) {
    delete format_settings_;
  }
  if (evidence_ != &::google::protobuf::internal::kEmptyString) {
    delete evidence_;
  }
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_key_;
  }
  if (this != default_instance_) {
  }
}

void LocalAttestationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalAttestationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalAttestationRequest_descriptor_;
}

const LocalAttestationRequest& LocalAttestationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_local_5fattest_2eproto();  return *default_instance_;
}

LocalAttestationRequest* LocalAttestationRequest::default_instance_ = NULL;

LocalAttestationRequest* LocalAttestationRequest::New() const {
  return new LocalAttestationRequest;
}

void LocalAttestationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = GOOGLE_LONGLONG(0);
    format_settings_size_ = GOOGLE_LONGLONG(0);
    if (has_format_settings()) {
      if (format_settings_ != &::google::protobuf::internal::kEmptyString) {
        format_settings_->clear();
      }
    }
    evidence_size_ = GOOGLE_LONGLONG(0);
    if (has_evidence()) {
      if (evidence_ != &::google::protobuf::internal::kEmptyString) {
        evidence_->clear();
      }
    }
    pub_key_size_ = GOOGLE_LONGLONG(0);
    if (has_pub_key()) {
      if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
        pub_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalAttestationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_format_settings_size;
        break;
      }
      
      // optional int64 format_settings_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_settings_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &format_settings_size_)));
          set_has_format_settings_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_format_settings;
        break;
      }
      
      // optional bytes format_settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_format_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_evidence_size;
        break;
      }
      
      // optional int64 evidence_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evidence_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &evidence_size_)));
          set_has_evidence_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_evidence;
        break;
      }
      
      // optional bytes evidence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evidence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evidence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pub_key_size;
        break;
      }
      
      // optional int64 pub_key_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_key_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pub_key_size_)));
          set_has_pub_key_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pub_key;
        break;
      }
      
      // optional bytes pub_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalAttestationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step(), output);
  }
  
  // optional int64 format_settings_size = 2;
  if (has_format_settings_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->format_settings_size(), output);
  }
  
  // optional bytes format_settings = 3;
  if (has_format_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->format_settings(), output);
  }
  
  // optional int64 evidence_size = 4;
  if (has_evidence_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->evidence_size(), output);
  }
  
  // optional bytes evidence = 5;
  if (has_evidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->evidence(), output);
  }
  
  // optional int64 pub_key_size = 6;
  if (has_pub_key_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pub_key_size(), output);
  }
  
  // optional bytes pub_key = 7;
  if (has_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->pub_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalAttestationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step(), target);
  }
  
  // optional int64 format_settings_size = 2;
  if (has_format_settings_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->format_settings_size(), target);
  }
  
  // optional bytes format_settings = 3;
  if (has_format_settings()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->format_settings(), target);
  }
  
  // optional int64 evidence_size = 4;
  if (has_evidence_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->evidence_size(), target);
  }
  
  // optional bytes evidence = 5;
  if (has_evidence()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->evidence(), target);
  }
  
  // optional int64 pub_key_size = 6;
  if (has_pub_key_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pub_key_size(), target);
  }
  
  // optional bytes pub_key = 7;
  if (has_pub_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->pub_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalAttestationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->step());
    }
    
    // optional int64 format_settings_size = 2;
    if (has_format_settings_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->format_settings_size());
    }
    
    // optional bytes format_settings = 3;
    if (has_format_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->format_settings());
    }
    
    // optional int64 evidence_size = 4;
    if (has_evidence_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->evidence_size());
    }
    
    // optional bytes evidence = 5;
    if (has_evidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->evidence());
    }
    
    // optional int64 pub_key_size = 6;
    if (has_pub_key_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pub_key_size());
    }
    
    // optional bytes pub_key = 7;
    if (has_pub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pub_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalAttestationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalAttestationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalAttestationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalAttestationRequest::MergeFrom(const LocalAttestationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_format_settings_size()) {
      set_format_settings_size(from.format_settings_size());
    }
    if (from.has_format_settings()) {
      set_format_settings(from.format_settings());
    }
    if (from.has_evidence_size()) {
      set_evidence_size(from.evidence_size());
    }
    if (from.has_evidence()) {
      set_evidence(from.evidence());
    }
    if (from.has_pub_key_size()) {
      set_pub_key_size(from.pub_key_size());
    }
    if (from.has_pub_key()) {
      set_pub_key(from.pub_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalAttestationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalAttestationRequest::CopyFrom(const LocalAttestationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalAttestationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LocalAttestationRequest::Swap(LocalAttestationRequest* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(format_settings_size_, other->format_settings_size_);
    std::swap(format_settings_, other->format_settings_);
    std::swap(evidence_size_, other->evidence_size_);
    std::swap(evidence_, other->evidence_);
    std::swap(pub_key_size_, other->pub_key_size_);
    std::swap(pub_key_, other->pub_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalAttestationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalAttestationRequest_descriptor_;
  metadata.reflection = LocalAttestationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AKMEnclaveRequest::kReqTypeFieldNumber;
const int AKMEnclaveRequest::kKeyFieldNumber;
const int AKMEnclaveRequest::kValueFieldNumber;
const int AKMEnclaveRequest::kAkmeNonceFieldNumber;
const int AKMEnclaveRequest::kKveNonceFieldNumber;
#endif  // !_MSC_VER

AKMEnclaveRequest::AKMEnclaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AKMEnclaveRequest::InitAsDefaultInstance() {
}

AKMEnclaveRequest::AKMEnclaveRequest(const AKMEnclaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AKMEnclaveRequest::SharedCtor() {
  _cached_size_ = 0;
  req_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  akme_nonce_ = GOOGLE_ULONGLONG(0);
  kve_nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AKMEnclaveRequest::~AKMEnclaveRequest() {
  SharedDtor();
}

void AKMEnclaveRequest::SharedDtor() {
  if (req_type_ != &::google::protobuf::internal::kEmptyString) {
    delete req_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AKMEnclaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AKMEnclaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AKMEnclaveRequest_descriptor_;
}

const AKMEnclaveRequest& AKMEnclaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_local_5fattest_2eproto();  return *default_instance_;
}

AKMEnclaveRequest* AKMEnclaveRequest::default_instance_ = NULL;

AKMEnclaveRequest* AKMEnclaveRequest::New() const {
  return new AKMEnclaveRequest;
}

void AKMEnclaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_type()) {
      if (req_type_ != &::google::protobuf::internal::kEmptyString) {
        req_type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    akme_nonce_ = GOOGLE_ULONGLONG(0);
    kve_nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AKMEnclaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string req_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_type().data(), this->req_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_akme_nonce;
        break;
      }
      
      // required uint64 akme_nonce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_akme_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &akme_nonce_)));
          set_has_akme_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kve_nonce;
        break;
      }
      
      // required uint64 kve_nonce = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kve_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kve_nonce_)));
          set_has_kve_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AKMEnclaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_type().data(), this->req_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->req_type(), output);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }
  
  // required uint64 akme_nonce = 4;
  if (has_akme_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->akme_nonce(), output);
  }
  
  // required uint64 kve_nonce = 5;
  if (has_kve_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->kve_nonce(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AKMEnclaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_type().data(), this->req_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_type(), target);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }
  
  // required uint64 akme_nonce = 4;
  if (has_akme_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->akme_nonce(), target);
  }
  
  // required uint64 kve_nonce = 5;
  if (has_kve_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->kve_nonce(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AKMEnclaveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string req_type = 1;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_type());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
    // required uint64 akme_nonce = 4;
    if (has_akme_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->akme_nonce());
    }
    
    // required uint64 kve_nonce = 5;
    if (has_kve_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kve_nonce());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AKMEnclaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AKMEnclaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AKMEnclaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AKMEnclaveRequest::MergeFrom(const AKMEnclaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_akme_nonce()) {
      set_akme_nonce(from.akme_nonce());
    }
    if (from.has_kve_nonce()) {
      set_kve_nonce(from.kve_nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AKMEnclaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AKMEnclaveRequest::CopyFrom(const AKMEnclaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AKMEnclaveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  return true;
}

void AKMEnclaveRequest::Swap(AKMEnclaveRequest* other) {
  if (other != this) {
    std::swap(req_type_, other->req_type_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(akme_nonce_, other->akme_nonce_);
    std::swap(kve_nonce_, other->kve_nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AKMEnclaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AKMEnclaveRequest_descriptor_;
  metadata.reflection = AKMEnclaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KVEnclaveResponse::kAkmeNonceFieldNumber;
const int KVEnclaveResponse::kKveNonceFieldNumber;
const int KVEnclaveResponse::kSuccessFieldNumber;
const int KVEnclaveResponse::kValueFieldNumber;
#endif  // !_MSC_VER

KVEnclaveResponse::KVEnclaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KVEnclaveResponse::InitAsDefaultInstance() {
}

KVEnclaveResponse::KVEnclaveResponse(const KVEnclaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KVEnclaveResponse::SharedCtor() {
  _cached_size_ = 0;
  akme_nonce_ = GOOGLE_ULONGLONG(0);
  kve_nonce_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVEnclaveResponse::~KVEnclaveResponse() {
  SharedDtor();
}

void KVEnclaveResponse::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KVEnclaveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVEnclaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVEnclaveResponse_descriptor_;
}

const KVEnclaveResponse& KVEnclaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_local_5fattest_2eproto();  return *default_instance_;
}

KVEnclaveResponse* KVEnclaveResponse::default_instance_ = NULL;

KVEnclaveResponse* KVEnclaveResponse::New() const {
  return new KVEnclaveResponse;
}

void KVEnclaveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    akme_nonce_ = GOOGLE_ULONGLONG(0);
    kve_nonce_ = GOOGLE_ULONGLONG(0);
    success_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KVEnclaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 akme_nonce = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &akme_nonce_)));
          set_has_akme_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kve_nonce;
        break;
      }
      
      // required uint64 kve_nonce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kve_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kve_nonce_)));
          set_has_kve_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }
      
      // required bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // optional bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KVEnclaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 akme_nonce = 1;
  if (has_akme_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->akme_nonce(), output);
  }
  
  // required uint64 kve_nonce = 2;
  if (has_kve_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kve_nonce(), output);
  }
  
  // required bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }
  
  // optional bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KVEnclaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 akme_nonce = 1;
  if (has_akme_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->akme_nonce(), target);
  }
  
  // required uint64 kve_nonce = 2;
  if (has_kve_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kve_nonce(), target);
  }
  
  // required bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }
  
  // optional bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KVEnclaveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 akme_nonce = 1;
    if (has_akme_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->akme_nonce());
    }
    
    // required uint64 kve_nonce = 2;
    if (has_kve_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kve_nonce());
    }
    
    // required bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVEnclaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KVEnclaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KVEnclaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KVEnclaveResponse::MergeFrom(const KVEnclaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_akme_nonce()) {
      set_akme_nonce(from.akme_nonce());
    }
    if (from.has_kve_nonce()) {
      set_kve_nonce(from.kve_nonce());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KVEnclaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVEnclaveResponse::CopyFrom(const KVEnclaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVEnclaveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KVEnclaveResponse::Swap(KVEnclaveResponse* other) {
  if (other != this) {
    std::swap(akme_nonce_, other->akme_nonce_);
    std::swap(kve_nonce_, other->kve_nonce_);
    std::swap(success_, other->success_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KVEnclaveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVEnclaveResponse_descriptor_;
  metadata.reflection = KVEnclaveResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
