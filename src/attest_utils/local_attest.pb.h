// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_attest.proto

#ifndef PROTOBUF_local_5fattest_2eproto__INCLUDED
#define PROTOBUF_local_5fattest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_local_5fattest_2eproto();
void protobuf_AssignDesc_local_5fattest_2eproto();
void protobuf_ShutdownFile_local_5fattest_2eproto();

class LocalAttestationRequest;
class AKMEnclaveRequest;
class KVEnclaveResponse;

// ===================================================================

class LocalAttestationRequest : public ::google::protobuf::Message {
 public:
  LocalAttestationRequest();
  virtual ~LocalAttestationRequest();
  
  LocalAttestationRequest(const LocalAttestationRequest& from);
  
  inline LocalAttestationRequest& operator=(const LocalAttestationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalAttestationRequest& default_instance();
  
  void Swap(LocalAttestationRequest* other);
  
  // implements Message ----------------------------------------------
  
  LocalAttestationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalAttestationRequest& from);
  void MergeFrom(const LocalAttestationRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  inline ::google::protobuf::int64 step() const;
  inline void set_step(::google::protobuf::int64 value);
  
  // optional int64 format_settings_size = 2;
  inline bool has_format_settings_size() const;
  inline void clear_format_settings_size();
  static const int kFormatSettingsSizeFieldNumber = 2;
  inline ::google::protobuf::int64 format_settings_size() const;
  inline void set_format_settings_size(::google::protobuf::int64 value);
  
  // optional bytes format_settings = 3;
  inline bool has_format_settings() const;
  inline void clear_format_settings();
  static const int kFormatSettingsFieldNumber = 3;
  inline const ::std::string& format_settings() const;
  inline void set_format_settings(const ::std::string& value);
  inline void set_format_settings(const char* value);
  inline void set_format_settings(const void* value, size_t size);
  inline ::std::string* mutable_format_settings();
  inline ::std::string* release_format_settings();
  
  // optional int64 evidence_size = 4;
  inline bool has_evidence_size() const;
  inline void clear_evidence_size();
  static const int kEvidenceSizeFieldNumber = 4;
  inline ::google::protobuf::int64 evidence_size() const;
  inline void set_evidence_size(::google::protobuf::int64 value);
  
  // optional bytes evidence = 5;
  inline bool has_evidence() const;
  inline void clear_evidence();
  static const int kEvidenceFieldNumber = 5;
  inline const ::std::string& evidence() const;
  inline void set_evidence(const ::std::string& value);
  inline void set_evidence(const char* value);
  inline void set_evidence(const void* value, size_t size);
  inline ::std::string* mutable_evidence();
  inline ::std::string* release_evidence();
  
  // optional int64 pub_key_size = 6;
  inline bool has_pub_key_size() const;
  inline void clear_pub_key_size();
  static const int kPubKeySizeFieldNumber = 6;
  inline ::google::protobuf::int64 pub_key_size() const;
  inline void set_pub_key_size(::google::protobuf::int64 value);
  
  // optional bytes pub_key = 7;
  inline bool has_pub_key() const;
  inline void clear_pub_key();
  static const int kPubKeyFieldNumber = 7;
  inline const ::std::string& pub_key() const;
  inline void set_pub_key(const ::std::string& value);
  inline void set_pub_key(const char* value);
  inline void set_pub_key(const void* value, size_t size);
  inline ::std::string* mutable_pub_key();
  inline ::std::string* release_pub_key();
  
  // @@protoc_insertion_point(class_scope:LocalAttestationRequest)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_format_settings_size();
  inline void clear_has_format_settings_size();
  inline void set_has_format_settings();
  inline void clear_has_format_settings();
  inline void set_has_evidence_size();
  inline void clear_has_evidence_size();
  inline void set_has_evidence();
  inline void clear_has_evidence();
  inline void set_has_pub_key_size();
  inline void clear_has_pub_key_size();
  inline void set_has_pub_key();
  inline void clear_has_pub_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 step_;
  ::google::protobuf::int64 format_settings_size_;
  ::std::string* format_settings_;
  ::google::protobuf::int64 evidence_size_;
  ::std::string* evidence_;
  ::google::protobuf::int64 pub_key_size_;
  ::std::string* pub_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_local_5fattest_2eproto();
  friend void protobuf_AssignDesc_local_5fattest_2eproto();
  friend void protobuf_ShutdownFile_local_5fattest_2eproto();
  
  void InitAsDefaultInstance();
  static LocalAttestationRequest* default_instance_;
};
// -------------------------------------------------------------------

class AKMEnclaveRequest : public ::google::protobuf::Message {
 public:
  AKMEnclaveRequest();
  virtual ~AKMEnclaveRequest();
  
  AKMEnclaveRequest(const AKMEnclaveRequest& from);
  
  inline AKMEnclaveRequest& operator=(const AKMEnclaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AKMEnclaveRequest& default_instance();
  
  void Swap(AKMEnclaveRequest* other);
  
  // implements Message ----------------------------------------------
  
  AKMEnclaveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AKMEnclaveRequest& from);
  void MergeFrom(const AKMEnclaveRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string req_type = 1;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  inline const ::std::string& req_type() const;
  inline void set_req_type(const ::std::string& value);
  inline void set_req_type(const char* value);
  inline void set_req_type(const char* value, size_t size);
  inline ::std::string* mutable_req_type();
  inline ::std::string* release_req_type();
  
  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // required uint64 akme_nonce = 4;
  inline bool has_akme_nonce() const;
  inline void clear_akme_nonce();
  static const int kAkmeNonceFieldNumber = 4;
  inline ::google::protobuf::uint64 akme_nonce() const;
  inline void set_akme_nonce(::google::protobuf::uint64 value);
  
  // required uint64 kve_nonce = 5;
  inline bool has_kve_nonce() const;
  inline void clear_kve_nonce();
  static const int kKveNonceFieldNumber = 5;
  inline ::google::protobuf::uint64 kve_nonce() const;
  inline void set_kve_nonce(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:AKMEnclaveRequest)
 private:
  inline void set_has_req_type();
  inline void clear_has_req_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_akme_nonce();
  inline void clear_has_akme_nonce();
  inline void set_has_kve_nonce();
  inline void clear_has_kve_nonce();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* req_type_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::uint64 akme_nonce_;
  ::google::protobuf::uint64 kve_nonce_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_local_5fattest_2eproto();
  friend void protobuf_AssignDesc_local_5fattest_2eproto();
  friend void protobuf_ShutdownFile_local_5fattest_2eproto();
  
  void InitAsDefaultInstance();
  static AKMEnclaveRequest* default_instance_;
};
// -------------------------------------------------------------------

class KVEnclaveResponse : public ::google::protobuf::Message {
 public:
  KVEnclaveResponse();
  virtual ~KVEnclaveResponse();
  
  KVEnclaveResponse(const KVEnclaveResponse& from);
  
  inline KVEnclaveResponse& operator=(const KVEnclaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVEnclaveResponse& default_instance();
  
  void Swap(KVEnclaveResponse* other);
  
  // implements Message ----------------------------------------------
  
  KVEnclaveResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVEnclaveResponse& from);
  void MergeFrom(const KVEnclaveResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 akme_nonce = 1;
  inline bool has_akme_nonce() const;
  inline void clear_akme_nonce();
  static const int kAkmeNonceFieldNumber = 1;
  inline ::google::protobuf::uint64 akme_nonce() const;
  inline void set_akme_nonce(::google::protobuf::uint64 value);
  
  // required uint64 kve_nonce = 2;
  inline bool has_kve_nonce() const;
  inline void clear_kve_nonce();
  static const int kKveNonceFieldNumber = 2;
  inline ::google::protobuf::uint64 kve_nonce() const;
  inline void set_kve_nonce(::google::protobuf::uint64 value);
  
  // required bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:KVEnclaveResponse)
 private:
  inline void set_has_akme_nonce();
  inline void clear_has_akme_nonce();
  inline void set_has_kve_nonce();
  inline void clear_has_kve_nonce();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 akme_nonce_;
  ::google::protobuf::uint64 kve_nonce_;
  ::std::string* value_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_local_5fattest_2eproto();
  friend void protobuf_AssignDesc_local_5fattest_2eproto();
  friend void protobuf_ShutdownFile_local_5fattest_2eproto();
  
  void InitAsDefaultInstance();
  static KVEnclaveResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LocalAttestationRequest

// required int64 step = 1;
inline bool LocalAttestationRequest::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalAttestationRequest::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalAttestationRequest::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalAttestationRequest::clear_step() {
  step_ = GOOGLE_LONGLONG(0);
  clear_has_step();
}
inline ::google::protobuf::int64 LocalAttestationRequest::step() const {
  return step_;
}
inline void LocalAttestationRequest::set_step(::google::protobuf::int64 value) {
  set_has_step();
  step_ = value;
}

// optional int64 format_settings_size = 2;
inline bool LocalAttestationRequest::has_format_settings_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalAttestationRequest::set_has_format_settings_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalAttestationRequest::clear_has_format_settings_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalAttestationRequest::clear_format_settings_size() {
  format_settings_size_ = GOOGLE_LONGLONG(0);
  clear_has_format_settings_size();
}
inline ::google::protobuf::int64 LocalAttestationRequest::format_settings_size() const {
  return format_settings_size_;
}
inline void LocalAttestationRequest::set_format_settings_size(::google::protobuf::int64 value) {
  set_has_format_settings_size();
  format_settings_size_ = value;
}

// optional bytes format_settings = 3;
inline bool LocalAttestationRequest::has_format_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalAttestationRequest::set_has_format_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalAttestationRequest::clear_has_format_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalAttestationRequest::clear_format_settings() {
  if (format_settings_ != &::google::protobuf::internal::kEmptyString) {
    format_settings_->clear();
  }
  clear_has_format_settings();
}
inline const ::std::string& LocalAttestationRequest::format_settings() const {
  return *format_settings_;
}
inline void LocalAttestationRequest::set_format_settings(const ::std::string& value) {
  set_has_format_settings();
  if (format_settings_ == &::google::protobuf::internal::kEmptyString) {
    format_settings_ = new ::std::string;
  }
  format_settings_->assign(value);
}
inline void LocalAttestationRequest::set_format_settings(const char* value) {
  set_has_format_settings();
  if (format_settings_ == &::google::protobuf::internal::kEmptyString) {
    format_settings_ = new ::std::string;
  }
  format_settings_->assign(value);
}
inline void LocalAttestationRequest::set_format_settings(const void* value, size_t size) {
  set_has_format_settings();
  if (format_settings_ == &::google::protobuf::internal::kEmptyString) {
    format_settings_ = new ::std::string;
  }
  format_settings_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalAttestationRequest::mutable_format_settings() {
  set_has_format_settings();
  if (format_settings_ == &::google::protobuf::internal::kEmptyString) {
    format_settings_ = new ::std::string;
  }
  return format_settings_;
}
inline ::std::string* LocalAttestationRequest::release_format_settings() {
  clear_has_format_settings();
  if (format_settings_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = format_settings_;
    format_settings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 evidence_size = 4;
inline bool LocalAttestationRequest::has_evidence_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalAttestationRequest::set_has_evidence_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalAttestationRequest::clear_has_evidence_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalAttestationRequest::clear_evidence_size() {
  evidence_size_ = GOOGLE_LONGLONG(0);
  clear_has_evidence_size();
}
inline ::google::protobuf::int64 LocalAttestationRequest::evidence_size() const {
  return evidence_size_;
}
inline void LocalAttestationRequest::set_evidence_size(::google::protobuf::int64 value) {
  set_has_evidence_size();
  evidence_size_ = value;
}

// optional bytes evidence = 5;
inline bool LocalAttestationRequest::has_evidence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalAttestationRequest::set_has_evidence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalAttestationRequest::clear_has_evidence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocalAttestationRequest::clear_evidence() {
  if (evidence_ != &::google::protobuf::internal::kEmptyString) {
    evidence_->clear();
  }
  clear_has_evidence();
}
inline const ::std::string& LocalAttestationRequest::evidence() const {
  return *evidence_;
}
inline void LocalAttestationRequest::set_evidence(const ::std::string& value) {
  set_has_evidence();
  if (evidence_ == &::google::protobuf::internal::kEmptyString) {
    evidence_ = new ::std::string;
  }
  evidence_->assign(value);
}
inline void LocalAttestationRequest::set_evidence(const char* value) {
  set_has_evidence();
  if (evidence_ == &::google::protobuf::internal::kEmptyString) {
    evidence_ = new ::std::string;
  }
  evidence_->assign(value);
}
inline void LocalAttestationRequest::set_evidence(const void* value, size_t size) {
  set_has_evidence();
  if (evidence_ == &::google::protobuf::internal::kEmptyString) {
    evidence_ = new ::std::string;
  }
  evidence_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalAttestationRequest::mutable_evidence() {
  set_has_evidence();
  if (evidence_ == &::google::protobuf::internal::kEmptyString) {
    evidence_ = new ::std::string;
  }
  return evidence_;
}
inline ::std::string* LocalAttestationRequest::release_evidence() {
  clear_has_evidence();
  if (evidence_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = evidence_;
    evidence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 pub_key_size = 6;
inline bool LocalAttestationRequest::has_pub_key_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalAttestationRequest::set_has_pub_key_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocalAttestationRequest::clear_has_pub_key_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocalAttestationRequest::clear_pub_key_size() {
  pub_key_size_ = GOOGLE_LONGLONG(0);
  clear_has_pub_key_size();
}
inline ::google::protobuf::int64 LocalAttestationRequest::pub_key_size() const {
  return pub_key_size_;
}
inline void LocalAttestationRequest::set_pub_key_size(::google::protobuf::int64 value) {
  set_has_pub_key_size();
  pub_key_size_ = value;
}

// optional bytes pub_key = 7;
inline bool LocalAttestationRequest::has_pub_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LocalAttestationRequest::set_has_pub_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LocalAttestationRequest::clear_has_pub_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LocalAttestationRequest::clear_pub_key() {
  if (pub_key_ != &::google::protobuf::internal::kEmptyString) {
    pub_key_->clear();
  }
  clear_has_pub_key();
}
inline const ::std::string& LocalAttestationRequest::pub_key() const {
  return *pub_key_;
}
inline void LocalAttestationRequest::set_pub_key(const ::std::string& value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void LocalAttestationRequest::set_pub_key(const char* value) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(value);
}
inline void LocalAttestationRequest::set_pub_key(const void* value, size_t size) {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  pub_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalAttestationRequest::mutable_pub_key() {
  set_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    pub_key_ = new ::std::string;
  }
  return pub_key_;
}
inline ::std::string* LocalAttestationRequest::release_pub_key() {
  clear_has_pub_key();
  if (pub_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pub_key_;
    pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AKMEnclaveRequest

// required string req_type = 1;
inline bool AKMEnclaveRequest::has_req_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AKMEnclaveRequest::set_has_req_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AKMEnclaveRequest::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AKMEnclaveRequest::clear_req_type() {
  if (req_type_ != &::google::protobuf::internal::kEmptyString) {
    req_type_->clear();
  }
  clear_has_req_type();
}
inline const ::std::string& AKMEnclaveRequest::req_type() const {
  return *req_type_;
}
inline void AKMEnclaveRequest::set_req_type(const ::std::string& value) {
  set_has_req_type();
  if (req_type_ == &::google::protobuf::internal::kEmptyString) {
    req_type_ = new ::std::string;
  }
  req_type_->assign(value);
}
inline void AKMEnclaveRequest::set_req_type(const char* value) {
  set_has_req_type();
  if (req_type_ == &::google::protobuf::internal::kEmptyString) {
    req_type_ = new ::std::string;
  }
  req_type_->assign(value);
}
inline void AKMEnclaveRequest::set_req_type(const char* value, size_t size) {
  set_has_req_type();
  if (req_type_ == &::google::protobuf::internal::kEmptyString) {
    req_type_ = new ::std::string;
  }
  req_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AKMEnclaveRequest::mutable_req_type() {
  set_has_req_type();
  if (req_type_ == &::google::protobuf::internal::kEmptyString) {
    req_type_ = new ::std::string;
  }
  return req_type_;
}
inline ::std::string* AKMEnclaveRequest::release_req_type() {
  clear_has_req_type();
  if (req_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_type_;
    req_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string key = 2;
inline bool AKMEnclaveRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AKMEnclaveRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AKMEnclaveRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AKMEnclaveRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AKMEnclaveRequest::key() const {
  return *key_;
}
inline void AKMEnclaveRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AKMEnclaveRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AKMEnclaveRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AKMEnclaveRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* AKMEnclaveRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes value = 3;
inline bool AKMEnclaveRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AKMEnclaveRequest::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AKMEnclaveRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AKMEnclaveRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AKMEnclaveRequest::value() const {
  return *value_;
}
inline void AKMEnclaveRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AKMEnclaveRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AKMEnclaveRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AKMEnclaveRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* AKMEnclaveRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 akme_nonce = 4;
inline bool AKMEnclaveRequest::has_akme_nonce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AKMEnclaveRequest::set_has_akme_nonce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AKMEnclaveRequest::clear_has_akme_nonce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AKMEnclaveRequest::clear_akme_nonce() {
  akme_nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_akme_nonce();
}
inline ::google::protobuf::uint64 AKMEnclaveRequest::akme_nonce() const {
  return akme_nonce_;
}
inline void AKMEnclaveRequest::set_akme_nonce(::google::protobuf::uint64 value) {
  set_has_akme_nonce();
  akme_nonce_ = value;
}

// required uint64 kve_nonce = 5;
inline bool AKMEnclaveRequest::has_kve_nonce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AKMEnclaveRequest::set_has_kve_nonce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AKMEnclaveRequest::clear_has_kve_nonce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AKMEnclaveRequest::clear_kve_nonce() {
  kve_nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_kve_nonce();
}
inline ::google::protobuf::uint64 AKMEnclaveRequest::kve_nonce() const {
  return kve_nonce_;
}
inline void AKMEnclaveRequest::set_kve_nonce(::google::protobuf::uint64 value) {
  set_has_kve_nonce();
  kve_nonce_ = value;
}

// -------------------------------------------------------------------

// KVEnclaveResponse

// required uint64 akme_nonce = 1;
inline bool KVEnclaveResponse::has_akme_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVEnclaveResponse::set_has_akme_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVEnclaveResponse::clear_has_akme_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVEnclaveResponse::clear_akme_nonce() {
  akme_nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_akme_nonce();
}
inline ::google::protobuf::uint64 KVEnclaveResponse::akme_nonce() const {
  return akme_nonce_;
}
inline void KVEnclaveResponse::set_akme_nonce(::google::protobuf::uint64 value) {
  set_has_akme_nonce();
  akme_nonce_ = value;
}

// required uint64 kve_nonce = 2;
inline bool KVEnclaveResponse::has_kve_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KVEnclaveResponse::set_has_kve_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KVEnclaveResponse::clear_has_kve_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KVEnclaveResponse::clear_kve_nonce() {
  kve_nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_kve_nonce();
}
inline ::google::protobuf::uint64 KVEnclaveResponse::kve_nonce() const {
  return kve_nonce_;
}
inline void KVEnclaveResponse::set_kve_nonce(::google::protobuf::uint64 value) {
  set_has_kve_nonce();
  kve_nonce_ = value;
}

// required bool success = 3;
inline bool KVEnclaveResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KVEnclaveResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KVEnclaveResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KVEnclaveResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool KVEnclaveResponse::success() const {
  return success_;
}
inline void KVEnclaveResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional bytes value = 4;
inline bool KVEnclaveResponse::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KVEnclaveResponse::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KVEnclaveResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KVEnclaveResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KVEnclaveResponse::value() const {
  return *value_;
}
inline void KVEnclaveResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVEnclaveResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVEnclaveResponse::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVEnclaveResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KVEnclaveResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_local_5fattest_2eproto__INCLUDED
