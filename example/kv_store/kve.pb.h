// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kve.proto

#ifndef PROTOBUF_kve_2eproto__INCLUDED
#define PROTOBUF_kve_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace kv_enclave {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kve_2eproto();
void protobuf_AssignDesc_kve_2eproto();
void protobuf_ShutdownFile_kve_2eproto();

class KVStoreRequest;
class KVLoadRequest;
class KVResponse;

// ===================================================================

class KVStoreRequest : public ::google::protobuf::Message {
 public:
  KVStoreRequest();
  virtual ~KVStoreRequest();
  
  KVStoreRequest(const KVStoreRequest& from);
  
  inline KVStoreRequest& operator=(const KVStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVStoreRequest& default_instance();
  
  void Swap(KVStoreRequest* other);
  
  // implements Message ----------------------------------------------
  
  KVStoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVStoreRequest& from);
  void MergeFrom(const KVStoreRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:kv_enclave.KVStoreRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_kve_2eproto();
  friend void protobuf_AssignDesc_kve_2eproto();
  friend void protobuf_ShutdownFile_kve_2eproto();
  
  void InitAsDefaultInstance();
  static KVStoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class KVLoadRequest : public ::google::protobuf::Message {
 public:
  KVLoadRequest();
  virtual ~KVLoadRequest();
  
  KVLoadRequest(const KVLoadRequest& from);
  
  inline KVLoadRequest& operator=(const KVLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVLoadRequest& default_instance();
  
  void Swap(KVLoadRequest* other);
  
  // implements Message ----------------------------------------------
  
  KVLoadRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVLoadRequest& from);
  void MergeFrom(const KVLoadRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // @@protoc_insertion_point(class_scope:kv_enclave.KVLoadRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_kve_2eproto();
  friend void protobuf_AssignDesc_kve_2eproto();
  friend void protobuf_ShutdownFile_kve_2eproto();
  
  void InitAsDefaultInstance();
  static KVLoadRequest* default_instance_;
};
// -------------------------------------------------------------------

class KVResponse : public ::google::protobuf::Message {
 public:
  KVResponse();
  virtual ~KVResponse();
  
  KVResponse(const KVResponse& from);
  
  inline KVResponse& operator=(const KVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVResponse& default_instance();
  
  void Swap(KVResponse* other);
  
  // implements Message ----------------------------------------------
  
  KVResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVResponse& from);
  void MergeFrom(const KVResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional string redirect = 3;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 3;
  inline const ::std::string& redirect() const;
  inline void set_redirect(const ::std::string& value);
  inline void set_redirect(const char* value);
  inline void set_redirect(const char* value, size_t size);
  inline ::std::string* mutable_redirect();
  inline ::std::string* release_redirect();
  
  // @@protoc_insertion_point(class_scope:kv_enclave.KVResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_redirect();
  inline void clear_has_redirect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  ::std::string* redirect_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_kve_2eproto();
  friend void protobuf_AssignDesc_kve_2eproto();
  friend void protobuf_ShutdownFile_kve_2eproto();
  
  void InitAsDefaultInstance();
  static KVResponse* default_instance_;
};
// ===================================================================

class KVStoreService_Stub;

class KVStoreService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KVStoreService() {};
 public:
  virtual ~KVStoreService();
  
  typedef KVStoreService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void store_kv_item(::google::protobuf::RpcController* controller,
                       const ::kv_enclave::KVStoreRequest* request,
                       ::kv_enclave::KVResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void load_kv_item(::google::protobuf::RpcController* controller,
                       const ::kv_enclave::KVLoadRequest* request,
                       ::kv_enclave::KVResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVStoreService);
};

class KVStoreService_Stub : public KVStoreService {
 public:
  KVStoreService_Stub(::google::protobuf::RpcChannel* channel);
  KVStoreService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~KVStoreService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements KVStoreService ------------------------------------------
  
  void store_kv_item(::google::protobuf::RpcController* controller,
                       const ::kv_enclave::KVStoreRequest* request,
                       ::kv_enclave::KVResponse* response,
                       ::google::protobuf::Closure* done);
  void load_kv_item(::google::protobuf::RpcController* controller,
                       const ::kv_enclave::KVLoadRequest* request,
                       ::kv_enclave::KVResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVStoreService_Stub);
};


// ===================================================================


// ===================================================================

// KVStoreRequest

// required string key = 1;
inline bool KVStoreRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVStoreRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVStoreRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVStoreRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KVStoreRequest::key() const {
  return *key_;
}
inline void KVStoreRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KVStoreRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KVStoreRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVStoreRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KVStoreRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes value = 2;
inline bool KVStoreRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KVStoreRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KVStoreRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KVStoreRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KVStoreRequest::value() const {
  return *value_;
}
inline void KVStoreRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVStoreRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVStoreRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVStoreRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KVStoreRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// KVLoadRequest

// required string key = 1;
inline bool KVLoadRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVLoadRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVLoadRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVLoadRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KVLoadRequest::key() const {
  return *key_;
}
inline void KVLoadRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KVLoadRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KVLoadRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVLoadRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KVLoadRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// KVResponse

// required bool success = 1;
inline bool KVResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool KVResponse::success() const {
  return success_;
}
inline void KVResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional bytes value = 2;
inline bool KVResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KVResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KVResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KVResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KVResponse::value() const {
  return *value_;
}
inline void KVResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KVResponse::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KVResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string redirect = 3;
inline bool KVResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KVResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KVResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KVResponse::clear_redirect() {
  if (redirect_ != &::google::protobuf::internal::kEmptyString) {
    redirect_->clear();
  }
  clear_has_redirect();
}
inline const ::std::string& KVResponse::redirect() const {
  return *redirect_;
}
inline void KVResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
}
inline void KVResponse::set_redirect(const char* value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
}
inline void KVResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KVResponse::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    redirect_ = new ::std::string;
  }
  return redirect_;
}
inline ::std::string* KVResponse::release_redirect() {
  clear_has_redirect();
  if (redirect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = redirect_;
    redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv_enclave

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kve_2eproto__INCLUDED
